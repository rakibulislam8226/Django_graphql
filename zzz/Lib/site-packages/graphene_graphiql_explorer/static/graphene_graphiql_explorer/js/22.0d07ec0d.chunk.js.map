{"version":3,"sources":["../node_modules/@graphiql/react/dist/comment.es.js"],"names":["__webpack_require__","r","__webpack_exports__","d","comment$1","_mergeNamespaces2","_Users_creimers_projects_graphene_graphiql_explorer_graphene_graphiql_explorer_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_1__","__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","getOwnPropertyDescriptor","get","enumerable","freeze","comment$2","exports","CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","firstNonWS","str","found","search","probablyInsideString","cm","pos","line","test","getTokenTypeAt","getMode","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","minLine","Infinity","ranges","this","listSelections","i","length","from","to","uncomment","lineComment","self","firstLine","getLine","commentString","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","blockCommentStart","fullLines","blockComment","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","didSomething","start","lineString","lines","indexOf","push","i2","line2","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","found2","foundEnd","mod","comment","__proto__","Symbol","toStringTag"],"mappings":"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","file":"static/js/22.0d07ec0d.chunk.js","sourcesContent":["import _defineProperty from \"/Users/creimers/projects/graphene-graphiql-explorer/graphene_graphiql_explorer/src/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _mergeNamespaces2;\n\nvar __defProp = Object.defineProperty;\n\nvar __name = function __name(target, value) {\n  return __defProp(target, \"name\", {\n    value: value,\n    configurable: true\n  });\n};\n\nimport { a as codemirror } from \"./codemirror.es.js\";\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function (e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n\n__name(_mergeNamespaces, \"_mergeNamespaces\");\n\nvar comment$2 = {\n  exports: {}\n};\n\n(function (module, exports) {\n  (function (mod) {\n    mod(codemirror.exports);\n  })(function (CodeMirror) {\n    var noOptions = {};\n    var nonWS = /[^\\s\\u00a0]/;\n    var Pos = CodeMirror.Pos,\n        cmp = CodeMirror.cmpPos;\n\n    function firstNonWS(str) {\n      var found = str.search(nonWS);\n      return found == -1 ? 0 : found;\n    }\n\n    __name(firstNonWS, \"firstNonWS\");\n\n    CodeMirror.commands.toggleComment = function (cm) {\n      cm.toggleComment();\n    };\n\n    CodeMirror.defineExtension(\"toggleComment\", function (options) {\n      if (!options) options = noOptions;\n      var cm = this;\n      var minLine = Infinity,\n          ranges = this.listSelections(),\n          mode = null;\n\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var from = ranges[i].from(),\n            to = ranges[i].to();\n        if (from.line >= minLine) continue;\n        if (to.line >= minLine) to = Pos(minLine, 0);\n        minLine = from.line;\n\n        if (mode == null) {\n          if (cm.uncomment(from, to, options)) mode = \"un\";else {\n            cm.lineComment(from, to, options);\n            mode = \"line\";\n          }\n        } else if (mode == \"un\") {\n          cm.uncomment(from, to, options);\n        } else {\n          cm.lineComment(from, to, options);\n        }\n      }\n    });\n\n    function probablyInsideString(cm, pos, line) {\n      return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n    }\n\n    __name(probablyInsideString, \"probablyInsideString\");\n\n    function getMode(cm, pos) {\n      var mode = cm.getMode();\n      return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n    }\n\n    __name(getMode, \"getMode\");\n\n    CodeMirror.defineExtension(\"lineComment\", function (from, to, options) {\n      if (!options) options = noOptions;\n      var self = this,\n          mode = getMode(self, from);\n      var firstLine = self.getLine(from.line);\n      if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n      var commentString = options.lineComment || mode.lineComment;\n\n      if (!commentString) {\n        if (options.blockCommentStart || mode.blockCommentStart) {\n          options.fullLines = true;\n          self.blockComment(from, to, options);\n        }\n\n        return;\n      }\n\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n      var pad = options.padding == null ? \" \" : options.padding;\n      var blankLines = options.commentBlankLines || from.line == to.line;\n      self.operation(function () {\n        if (options.indent) {\n          var baseString = null;\n\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i);\n            var whitespace = line.slice(0, firstNonWS(line));\n\n            if (baseString == null || baseString.length > whitespace.length) {\n              baseString = whitespace;\n            }\n          }\n\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i),\n                cut = baseString.length;\n            if (!blankLines && !nonWS.test(line)) continue;\n            if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n            self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n          }\n        } else {\n          for (var i = from.line; i < end; ++i) {\n            if (blankLines || nonWS.test(self.getLine(i))) self.replaceRange(commentString + pad, Pos(i, 0));\n          }\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"blockComment\", function (from, to, options) {\n      if (!options) options = noOptions;\n      var self = this,\n          mode = getMode(self, from);\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n\n      if (!startString || !endString) {\n        if ((options.lineComment || mode.lineComment) && options.fullLines != false) self.lineComment(from, to, options);\n        return;\n      }\n\n      if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return;\n      var end = Math.min(to.line, self.lastLine());\n      if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n      var pad = options.padding == null ? \" \" : options.padding;\n      if (from.line > end) return;\n      self.operation(function () {\n        if (options.fullLines != false) {\n          var lastLineHasText = nonWS.test(self.getLine(end));\n          self.replaceRange(pad + endString, Pos(end));\n          self.replaceRange(startString + pad, Pos(from.line, 0));\n          var lead = options.blockCommentLead || mode.blockCommentLead;\n\n          if (lead != null) {\n            for (var i = from.line + 1; i <= end; ++i) {\n              if (i != end || lastLineHasText) self.replaceRange(lead + pad, Pos(i, 0));\n            }\n          }\n        } else {\n          var atCursor = cmp(self.getCursor(\"to\"), to) == 0,\n              empty = !self.somethingSelected();\n          self.replaceRange(endString, to);\n          if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n          self.replaceRange(startString, from);\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"uncomment\", function (from, to, options) {\n      if (!options) options = noOptions;\n      var self = this,\n          mode = getMode(self, from);\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()),\n          start = Math.min(from.line, end);\n      var lineString = options.lineComment || mode.lineComment,\n          lines = [];\n      var pad = options.padding == null ? \" \" : options.padding,\n          didSomething;\n\n      lineComment: {\n        if (!lineString) break lineComment;\n\n        for (var i = start; i <= end; ++i) {\n          var line = self.getLine(i);\n          var found = line.indexOf(lineString);\n          if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n          if (found == -1 && nonWS.test(line)) break lineComment;\n          if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n          lines.push(line);\n        }\n\n        self.operation(function () {\n          for (var i2 = start; i2 <= end; ++i2) {\n            var line2 = lines[i2 - start];\n            var pos = line2.indexOf(lineString),\n                endPos = pos + lineString.length;\n            if (pos < 0) continue;\n            if (line2.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n            didSomething = true;\n            self.replaceRange(\"\", Pos(i2, pos), Pos(i2, endPos));\n          }\n        });\n        if (didSomething) return true;\n      }\n\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) return false;\n      var lead = options.blockCommentLead || mode.blockCommentLead;\n      var startLine = self.getLine(start),\n          open = startLine.indexOf(startString);\n      if (open == -1) return false;\n      var endLine = end == start ? startLine : self.getLine(end);\n      var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n      var insideStart = Pos(start, open + 1),\n          insideEnd = Pos(end, close + 1);\n      if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1) return false;\n      var lastStart = startLine.lastIndexOf(startString, from.ch);\n      var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n      if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n      firstEnd = endLine.indexOf(endString, to.ch);\n      var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n      lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n      if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n      self.operation(function () {\n        self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)), Pos(end, close + endString.length));\n        var openEnd = open + startString.length;\n        if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n        self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n        if (lead) for (var i2 = start + 1; i2 <= end; ++i2) {\n          var line2 = self.getLine(i2),\n              found2 = line2.indexOf(lead);\n          if (found2 == -1 || nonWS.test(line2.slice(0, found2))) continue;\n          var foundEnd = found2 + lead.length;\n          if (pad && line2.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n          self.replaceRange(\"\", Pos(i2, found2), Pos(i2, foundEnd));\n        }\n      });\n      return true;\n    });\n  });\n})();\n\nvar comment = comment$2.exports;\nvar comment$1 =\n/* @__PURE__ */\nObject.freeze(\n/* @__PURE__ */\n_mergeNamespaces((_mergeNamespaces2 = {\n  __proto__: null\n}, _defineProperty(_mergeNamespaces2, Symbol.toStringTag, \"Module\"), _defineProperty(_mergeNamespaces2, \"default\", comment), _mergeNamespaces2), [comment$2.exports]));\nexport { comment$1 as c };"],"sourceRoot":""}