{"version":3,"sources":["../node_modules/@graphiql/react/dist/show-hint.es.js"],"names":["__webpack_require__","r","__webpack_exports__","d","showHint$1","_mergeNamespaces2","_Users_creimers_projects_graphene_graphiql_explorer_graphene_graphiql_explorer_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_1__","__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","getOwnPropertyDescriptor","get","enumerable","freeze","showHint$2","exports","CodeMirror","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","Completion","cm","options","this","widget","debounce","tick","startPos","getCursor","startLen","getLine","line","length","getSelection","updateOnCursorActivity","self","on","activityFunc","cursorActivity","showHint","getHints","async","newOpts","hint","prop","defineExtension","parseOptions","selections","listSelections","somethingSelected","supportsSelection","i","head","anchor","state","completionActive","close","completion","signal","update","requestAnimationFrame","window","fn","setTimeout","cancelAnimationFrame","clearTimeout","pos","editor","hintOptions","out","defaultOptions","resolve","getText","text","buildKeyMap","handle","baseMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","mac","test","navigator","platform","custom","customKeys","ourMap","addBinding","key2","val","bound","hasOwnProperty","key","extra","extraKeys","getHintElement","hintsElement","el","nodeName","toUpperCase","parentNode","Widget","data","id","Math","floor","random","picked","ownerDocument","getInputField","parentWindow","defaultView","hints","createElement","setAttribute","theme","className","selectedHint","completions","list","elt","appendChild","cur","render","createTextNode","displayText","hintId","container","body","cursorCoords","alignWithWord","from","left","top","bottom","below","offsetLeft","offsetTop","isContainerPositioned","indexOf","getComputedStyle","position","offsetParent","offsetParentPosition","getBoundingClientRect","bodyPosition","scrollLeft","scrollTop","style","winW","innerWidth","max","offsetWidth","documentElement","winH","innerHeight","offsetHeight","startScroll","box","moveOnOverlap","DOMRect","scrolls","paddingForScrollbar","scrollHeight","clientHeight","getScrollInfo","overlapY","height","curTop","cursor","ch","closingOnBlur","overlapX","right","display","nativeBarWidth","width","node","firstChild","nextSibling","paddingRight","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","onBlur","onFocus","onScroll","curScroll","getWrapperElement","newTop","point","pageYOffset","t","srcElement","completeOnSingleClick","focus","selectedHintRange","getSelectedHintRange","to","scrollToActive","childNodes","applicableHelpers","helpers","result","push","fetchHints","callback","then","resolveAutoHints","words","getHelpers","resolved","cm2","app","run","getHelper","fromList","anyword","prototype","active","off","operation","replaceRange","scrollIntoView","closeOnPick","identStart","closeCharacters","charAt","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","input","removeAttribute","replace","node1","node2","firstNode","margin","scrollMargin","min","registerHelper","term","token","getTokenAt","Pos","start","string","substr","found","word","slice","commands","autocomplete","auto","defineOption","mod","__proto__","Symbol","toStringTag"],"mappings":"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","file":"static/js/27.b1e7a533.chunk.js","sourcesContent":["import _defineProperty from \"/Users/creimers/projects/graphene-graphiql-explorer/graphene_graphiql_explorer/src/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _mergeNamespaces2;\n\nvar __defProp = Object.defineProperty;\n\nvar __name = function __name(target, value) {\n  return __defProp(target, \"name\", {\n    value: value,\n    configurable: true\n  });\n};\n\nimport { a as codemirror } from \"./codemirror.es.js\";\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function (e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n\n__name(_mergeNamespaces, \"_mergeNamespaces\");\n\nvar showHint$2 = {\n  exports: {}\n};\n\n(function (module, exports) {\n  (function (mod) {\n    mod(codemirror.exports);\n  })(function (CodeMirror) {\n    var HINT_ELEMENT_CLASS = \"CodeMirror-hint\";\n    var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n    CodeMirror.showHint = function (cm, getHints, options) {\n      if (!getHints) return cm.showHint(options);\n      if (options && options.async) getHints.async = true;\n      var newOpts = {\n        hint: getHints\n      };\n      if (options) for (var prop in options) {\n        newOpts[prop] = options[prop];\n      }\n      return cm.showHint(newOpts);\n    };\n\n    CodeMirror.defineExtension(\"showHint\", function (options) {\n      options = parseOptions(this, this.getCursor(\"start\"), options);\n      var selections = this.listSelections();\n      if (selections.length > 1) return;\n\n      if (this.somethingSelected()) {\n        if (!options.hint.supportsSelection) return;\n\n        for (var i = 0; i < selections.length; i++) {\n          if (selections[i].head.line != selections[i].anchor.line) return;\n        }\n      }\n\n      if (this.state.completionActive) this.state.completionActive.close();\n      var completion = this.state.completionActive = new Completion(this, options);\n      if (!completion.options.hint) return;\n      CodeMirror.signal(this, \"startCompletion\", this);\n      completion.update(true);\n    });\n    CodeMirror.defineExtension(\"closeHint\", function () {\n      if (this.state.completionActive) this.state.completionActive.close();\n    });\n\n    function Completion(cm, options) {\n      this.cm = cm;\n      this.options = options;\n      this.widget = null;\n      this.debounce = 0;\n      this.tick = 0;\n      this.startPos = this.cm.getCursor(\"start\");\n      this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n      if (this.options.updateOnCursorActivity) {\n        var self = this;\n        cm.on(\"cursorActivity\", this.activityFunc = function () {\n          self.cursorActivity();\n        });\n      }\n    }\n\n    __name(Completion, \"Completion\");\n\n    var requestAnimationFrame = window.requestAnimationFrame || function (fn) {\n      return setTimeout(fn, 1e3 / 60);\n    };\n\n    var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n    Completion.prototype = {\n      close: function close() {\n        if (!this.active()) return;\n        this.cm.state.completionActive = null;\n        this.tick = null;\n\n        if (this.options.updateOnCursorActivity) {\n          this.cm.off(\"cursorActivity\", this.activityFunc);\n        }\n\n        if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n        if (this.widget) this.widget.close();\n        CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n      },\n      active: function active() {\n        return this.cm.state.completionActive == this;\n      },\n      pick: function pick(data, i) {\n        var completion = data.list[i],\n            self = this;\n        this.cm.operation(function () {\n          if (completion.hint) completion.hint(self.cm, data, completion);else self.cm.replaceRange(getText(completion), completion.from || data.from, completion.to || data.to, \"complete\");\n          CodeMirror.signal(data, \"pick\", completion);\n          self.cm.scrollIntoView();\n        });\n\n        if (this.options.closeOnPick) {\n          this.close();\n        }\n      },\n      cursorActivity: function cursorActivity() {\n        if (this.debounce) {\n          cancelAnimationFrame(this.debounce);\n          this.debounce = 0;\n        }\n\n        var identStart = this.startPos;\n\n        if (this.data) {\n          identStart = this.data.from;\n        }\n\n        var pos = this.cm.getCursor(),\n            line = this.cm.getLine(pos.line);\n\n        if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch || pos.ch < identStart.ch || this.cm.somethingSelected() || !pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1))) {\n          this.close();\n        } else {\n          var self = this;\n          this.debounce = requestAnimationFrame(function () {\n            self.update();\n          });\n          if (this.widget) this.widget.disable();\n        }\n      },\n      update: function update(first) {\n        if (this.tick == null) return;\n        var self = this,\n            myTick = ++this.tick;\n        fetchHints(this.options.hint, this.cm, this.options, function (data) {\n          if (self.tick == myTick) self.finishUpdate(data, first);\n        });\n      },\n      finishUpdate: function finishUpdate(data, first) {\n        if (this.data) CodeMirror.signal(this.data, \"update\");\n        var picked = this.widget && this.widget.picked || first && this.options.completeSingle;\n        if (this.widget) this.widget.close();\n        this.data = data;\n\n        if (data && data.list.length) {\n          if (picked && data.list.length == 1) {\n            this.pick(data, 0);\n          } else {\n            this.widget = new Widget(this, data);\n            CodeMirror.signal(data, \"shown\");\n          }\n        }\n      }\n    };\n\n    function parseOptions(cm, pos, options) {\n      var editor = cm.options.hintOptions;\n      var out = {};\n\n      for (var prop in defaultOptions) {\n        out[prop] = defaultOptions[prop];\n      }\n\n      if (editor) {\n        for (var prop in editor) {\n          if (editor[prop] !== void 0) out[prop] = editor[prop];\n        }\n      }\n\n      if (options) {\n        for (var prop in options) {\n          if (options[prop] !== void 0) out[prop] = options[prop];\n        }\n      }\n\n      if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos);\n      return out;\n    }\n\n    __name(parseOptions, \"parseOptions\");\n\n    function getText(completion) {\n      if (typeof completion == \"string\") return completion;else return completion.text;\n    }\n\n    __name(getText, \"getText\");\n\n    function buildKeyMap(completion, handle) {\n      var baseMap = {\n        Up: function Up() {\n          handle.moveFocus(-1);\n        },\n        Down: function Down() {\n          handle.moveFocus(1);\n        },\n        PageUp: function PageUp() {\n          handle.moveFocus(-handle.menuSize() + 1, true);\n        },\n        PageDown: function PageDown() {\n          handle.moveFocus(handle.menuSize() - 1, true);\n        },\n        Home: function Home() {\n          handle.setFocus(0);\n        },\n        End: function End() {\n          handle.setFocus(handle.length - 1);\n        },\n        Enter: handle.pick,\n        Tab: handle.pick,\n        Esc: handle.close\n      };\n      var mac = /Mac/.test(navigator.platform);\n\n      if (mac) {\n        baseMap[\"Ctrl-P\"] = function () {\n          handle.moveFocus(-1);\n        };\n\n        baseMap[\"Ctrl-N\"] = function () {\n          handle.moveFocus(1);\n        };\n      }\n\n      var custom = completion.options.customKeys;\n      var ourMap = custom ? {} : baseMap;\n\n      function addBinding(key2, val) {\n        var bound;\n        if (typeof val != \"string\") bound =\n        /* @__PURE__ */\n        __name(function (cm) {\n          return val(cm, handle);\n        }, \"bound\");else if (baseMap.hasOwnProperty(val)) bound = baseMap[val];else bound = val;\n        ourMap[key2] = bound;\n      }\n\n      __name(addBinding, \"addBinding\");\n\n      if (custom) {\n        for (var key in custom) {\n          if (custom.hasOwnProperty(key)) addBinding(key, custom[key]);\n        }\n      }\n\n      var extra = completion.options.extraKeys;\n\n      if (extra) {\n        for (var key in extra) {\n          if (extra.hasOwnProperty(key)) addBinding(key, extra[key]);\n        }\n      }\n\n      return ourMap;\n    }\n\n    __name(buildKeyMap, \"buildKeyMap\");\n\n    function getHintElement(hintsElement, el) {\n      while (el && el != hintsElement) {\n        if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n        el = el.parentNode;\n      }\n    }\n\n    __name(getHintElement, \"getHintElement\");\n\n    function Widget(completion, data) {\n      this.id = \"cm-complete-\" + Math.floor(Math.random(1e6));\n      this.completion = completion;\n      this.data = data;\n      this.picked = false;\n      var widget = this,\n          cm = completion.cm;\n      var ownerDocument = cm.getInputField().ownerDocument;\n      var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n      var hints = this.hints = ownerDocument.createElement(\"ul\");\n      hints.setAttribute(\"role\", \"listbox\");\n      hints.setAttribute(\"aria-expanded\", \"true\");\n      hints.id = this.id;\n      var theme = completion.cm.options.theme;\n      hints.className = \"CodeMirror-hints \" + theme;\n      this.selectedHint = data.selectedHint || 0;\n      var completions = data.list;\n\n      for (var i = 0; i < completions.length; ++i) {\n        var elt = hints.appendChild(ownerDocument.createElement(\"li\")),\n            cur = completions[i];\n        var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n        if (cur.className != null) className = cur.className + \" \" + className;\n        elt.className = className;\n        if (i == this.selectedHint) elt.setAttribute(\"aria-selected\", \"true\");\n        elt.id = this.id + \"-\" + i;\n        elt.setAttribute(\"role\", \"option\");\n        if (cur.render) cur.render(elt, data, cur);else elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n        elt.hintId = i;\n      }\n\n      var container = completion.options.container || ownerDocument.body;\n      var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n      var left = pos.left,\n          top = pos.bottom,\n          below = true;\n      var offsetLeft = 0,\n          offsetTop = 0;\n\n      if (container !== ownerDocument.body) {\n        var isContainerPositioned = [\"absolute\", \"relative\", \"fixed\"].indexOf(parentWindow.getComputedStyle(container).position) !== -1;\n        var offsetParent = isContainerPositioned ? container : container.offsetParent;\n        var offsetParentPosition = offsetParent.getBoundingClientRect();\n        var bodyPosition = ownerDocument.body.getBoundingClientRect();\n        offsetLeft = offsetParentPosition.left - bodyPosition.left - offsetParent.scrollLeft;\n        offsetTop = offsetParentPosition.top - bodyPosition.top - offsetParent.scrollTop;\n      }\n\n      hints.style.left = left - offsetLeft + \"px\";\n      hints.style.top = top - offsetTop + \"px\";\n      var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n      var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n      container.appendChild(hints);\n      cm.getInputField().setAttribute(\"aria-autocomplete\", \"list\");\n      cm.getInputField().setAttribute(\"aria-owns\", this.id);\n      cm.getInputField().setAttribute(\"aria-activedescendant\", this.id + \"-\" + this.selectedHint);\n      var box = completion.options.moveOnOverlap ? hints.getBoundingClientRect() : new DOMRect();\n      var scrolls = completion.options.paddingForScrollbar ? hints.scrollHeight > hints.clientHeight + 1 : false;\n      var startScroll;\n      setTimeout(function () {\n        startScroll = cm.getScrollInfo();\n      });\n      var overlapY = box.bottom - winH;\n\n      if (overlapY > 0) {\n        var height = box.bottom - box.top,\n            curTop = pos.top - (pos.bottom - box.top);\n\n        if (curTop - height > 0) {\n          hints.style.top = (top = pos.top - height - offsetTop) + \"px\";\n          below = false;\n        } else if (height > winH) {\n          hints.style.height = winH - 5 + \"px\";\n          hints.style.top = (top = pos.bottom - box.top - offsetTop) + \"px\";\n          var cursor = cm.getCursor();\n\n          if (data.from.ch != cursor.ch) {\n            pos = cm.cursorCoords(cursor);\n            hints.style.left = (left = pos.left - offsetLeft) + \"px\";\n            box = hints.getBoundingClientRect();\n          }\n        }\n      }\n\n      var overlapX = box.right - winW;\n      if (scrolls) overlapX += cm.display.nativeBarWidth;\n\n      if (overlapX > 0) {\n        if (box.right - box.left > winW) {\n          hints.style.width = winW - 5 + \"px\";\n          overlapX -= box.right - box.left - winW;\n        }\n\n        hints.style.left = (left = pos.left - overlapX - offsetLeft) + \"px\";\n      }\n\n      if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling) {\n        node.style.paddingRight = cm.display.nativeBarWidth + \"px\";\n      }\n      cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n        moveFocus: function moveFocus(n, avoidWrap) {\n          widget.changeActive(widget.selectedHint + n, avoidWrap);\n        },\n        setFocus: function setFocus(n) {\n          widget.changeActive(n);\n        },\n        menuSize: function menuSize() {\n          return widget.screenAmount();\n        },\n        length: completions.length,\n        close: function close() {\n          completion.close();\n        },\n        pick: function pick() {\n          widget.pick();\n        },\n        data: data\n      }));\n\n      if (completion.options.closeOnUnfocus) {\n        var closingOnBlur;\n        cm.on(\"blur\", this.onBlur = function () {\n          closingOnBlur = setTimeout(function () {\n            completion.close();\n          }, 100);\n        });\n        cm.on(\"focus\", this.onFocus = function () {\n          clearTimeout(closingOnBlur);\n        });\n      }\n\n      cm.on(\"scroll\", this.onScroll = function () {\n        var curScroll = cm.getScrollInfo(),\n            editor = cm.getWrapperElement().getBoundingClientRect();\n        if (!startScroll) startScroll = cm.getScrollInfo();\n        var newTop = top + startScroll.top - curScroll.top;\n        var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n        if (!below) point += hints.offsetHeight;\n        if (point <= editor.top || point >= editor.bottom) return completion.close();\n        hints.style.top = newTop + \"px\";\n        hints.style.left = left + startScroll.left - curScroll.left + \"px\";\n      });\n      CodeMirror.on(hints, \"dblclick\", function (e) {\n        var t = getHintElement(hints, e.target || e.srcElement);\n\n        if (t && t.hintId != null) {\n          widget.changeActive(t.hintId);\n          widget.pick();\n        }\n      });\n      CodeMirror.on(hints, \"click\", function (e) {\n        var t = getHintElement(hints, e.target || e.srcElement);\n\n        if (t && t.hintId != null) {\n          widget.changeActive(t.hintId);\n          if (completion.options.completeOnSingleClick) widget.pick();\n        }\n      });\n      CodeMirror.on(hints, \"mousedown\", function () {\n        setTimeout(function () {\n          cm.focus();\n        }, 20);\n      });\n      var selectedHintRange = this.getSelectedHintRange();\n\n      if (selectedHintRange.from !== 0 || selectedHintRange.to !== 0) {\n        this.scrollToActive();\n      }\n\n      CodeMirror.signal(data, \"select\", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n      return true;\n    }\n\n    __name(Widget, \"Widget\");\n\n    Widget.prototype = {\n      close: function close() {\n        if (this.completion.widget != this) return;\n        this.completion.widget = null;\n        if (this.hints.parentNode) this.hints.parentNode.removeChild(this.hints);\n        this.completion.cm.removeKeyMap(this.keyMap);\n        var input = this.completion.cm.getInputField();\n        input.removeAttribute(\"aria-activedescendant\");\n        input.removeAttribute(\"aria-owns\");\n        var cm = this.completion.cm;\n\n        if (this.completion.options.closeOnUnfocus) {\n          cm.off(\"blur\", this.onBlur);\n          cm.off(\"focus\", this.onFocus);\n        }\n\n        cm.off(\"scroll\", this.onScroll);\n      },\n      disable: function disable() {\n        this.completion.cm.removeKeyMap(this.keyMap);\n        var widget = this;\n        this.keyMap = {\n          Enter: function Enter() {\n            widget.picked = true;\n          }\n        };\n        this.completion.cm.addKeyMap(this.keyMap);\n      },\n      pick: function pick() {\n        this.completion.pick(this.data, this.selectedHint);\n      },\n      changeActive: function changeActive(i, avoidWrap) {\n        if (i >= this.data.list.length) i = avoidWrap ? this.data.list.length - 1 : 0;else if (i < 0) i = avoidWrap ? 0 : this.data.list.length - 1;\n        if (this.selectedHint == i) return;\n        var node = this.hints.childNodes[this.selectedHint];\n\n        if (node) {\n          node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n          node.removeAttribute(\"aria-selected\");\n        }\n\n        node = this.hints.childNodes[this.selectedHint = i];\n        node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n        node.setAttribute(\"aria-selected\", \"true\");\n        this.completion.cm.getInputField().setAttribute(\"aria-activedescendant\", node.id);\n        this.scrollToActive();\n        CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n      },\n      scrollToActive: function scrollToActive() {\n        var selectedHintRange = this.getSelectedHintRange();\n        var node1 = this.hints.childNodes[selectedHintRange.from];\n        var node2 = this.hints.childNodes[selectedHintRange.to];\n        var firstNode = this.hints.firstChild;\n        if (node1.offsetTop < this.hints.scrollTop) this.hints.scrollTop = node1.offsetTop - firstNode.offsetTop;else if (node2.offsetTop + node2.offsetHeight > this.hints.scrollTop + this.hints.clientHeight) this.hints.scrollTop = node2.offsetTop + node2.offsetHeight - this.hints.clientHeight + firstNode.offsetTop;\n      },\n      screenAmount: function screenAmount() {\n        return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n      },\n      getSelectedHintRange: function getSelectedHintRange() {\n        var margin = this.completion.options.scrollMargin || 0;\n        return {\n          from: Math.max(0, this.selectedHint - margin),\n          to: Math.min(this.data.list.length - 1, this.selectedHint + margin)\n        };\n      }\n    };\n\n    function applicableHelpers(cm, helpers) {\n      if (!cm.somethingSelected()) return helpers;\n      var result = [];\n\n      for (var i = 0; i < helpers.length; i++) {\n        if (helpers[i].supportsSelection) result.push(helpers[i]);\n      }\n\n      return result;\n    }\n\n    __name(applicableHelpers, \"applicableHelpers\");\n\n    function fetchHints(hint, cm, options, callback) {\n      if (hint.async) {\n        hint(cm, callback, options);\n      } else {\n        var result = hint(cm, options);\n        if (result && result.then) result.then(callback);else callback(result);\n      }\n    }\n\n    __name(fetchHints, \"fetchHints\");\n\n    function resolveAutoHints(cm, pos) {\n      var helpers = cm.getHelpers(pos, \"hint\"),\n          words;\n\n      if (helpers.length) {\n        var resolved =\n        /* @__PURE__ */\n        __name(function (cm2, callback, options) {\n          var app = applicableHelpers(cm2, helpers);\n\n          function run(i) {\n            if (i == app.length) return callback(null);\n            fetchHints(app[i], cm2, options, function (result) {\n              if (result && result.list.length > 0) callback(result);else run(i + 1);\n            });\n          }\n\n          __name(run, \"run\");\n\n          run(0);\n        }, \"resolved\");\n\n        resolved.async = true;\n        resolved.supportsSelection = true;\n        return resolved;\n      } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n        return function (cm2) {\n          return CodeMirror.hint.fromList(cm2, {\n            words: words\n          });\n        };\n      } else if (CodeMirror.hint.anyword) {\n        return function (cm2, options) {\n          return CodeMirror.hint.anyword(cm2, options);\n        };\n      } else {\n        return function () {};\n      }\n    }\n\n    __name(resolveAutoHints, \"resolveAutoHints\");\n\n    CodeMirror.registerHelper(\"hint\", \"auto\", {\n      resolve: resolveAutoHints\n    });\n    CodeMirror.registerHelper(\"hint\", \"fromList\", function (cm, options) {\n      var cur = cm.getCursor(),\n          token = cm.getTokenAt(cur);\n      var term,\n          from = CodeMirror.Pos(cur.line, token.start),\n          to = cur;\n\n      if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n        term = token.string.substr(0, cur.ch - token.start);\n      } else {\n        term = \"\";\n        from = cur;\n      }\n\n      var found = [];\n\n      for (var i = 0; i < options.words.length; i++) {\n        var word = options.words[i];\n        if (word.slice(0, term.length) == term) found.push(word);\n      }\n\n      if (found.length) return {\n        list: found,\n        from: from,\n        to: to\n      };\n    });\n    CodeMirror.commands.autocomplete = CodeMirror.showHint;\n    var defaultOptions = {\n      hint: CodeMirror.hint.auto,\n      completeSingle: true,\n      alignWithWord: true,\n      closeCharacters: /[\\s()\\[\\]{};:>,]/,\n      closeOnPick: true,\n      closeOnUnfocus: true,\n      updateOnCursorActivity: true,\n      completeOnSingleClick: true,\n      container: null,\n      customKeys: null,\n      extraKeys: null,\n      paddingForScrollbar: true,\n      moveOnOverlap: true\n    };\n    CodeMirror.defineOption(\"hintOptions\", null);\n  });\n})();\n\nvar showHint = showHint$2.exports;\nvar showHint$1 =\n/* @__PURE__ */\nObject.freeze(\n/* @__PURE__ */\n_mergeNamespaces((_mergeNamespaces2 = {\n  __proto__: null\n}, _defineProperty(_mergeNamespaces2, Symbol.toStringTag, \"Module\"), _defineProperty(_mergeNamespaces2, \"default\", showHint), _mergeNamespaces2), [showHint$2.exports]));\nexport { showHint$1 as s };"],"sourceRoot":""}