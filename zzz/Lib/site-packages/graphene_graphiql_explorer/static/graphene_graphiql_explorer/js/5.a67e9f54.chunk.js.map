{"version":3,"sources":["../node_modules/@graphiql/react/dist/brace-fold.es.js"],"names":["__webpack_require__","r","__webpack_exports__","d","braceFold$1","_mergeNamespaces2","_Users_creimers_projects_graphene_graphiql_explorer_graphene_graphiql_explorer_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_1__","__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","getOwnPropertyDescriptor","get","enumerable","freeze","braceFold$2","exports","CodeMirror","bracketFolding","pairs","cm","start","line","lineText","getLine","findOpening","pair","tokenType","at","ch","pass","found2","lastIndexOf","getTokenTypeAt","Pos","test","length","findRange","end","endCh","count","lastLine","startCh","outer","i2","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","found","i","open","push","sort","a","b","range","registerHelper","hasImport","firstLine","start2","getTokenAt","string","type","semi","prev","startLine","has","next","clipPos","hasInclude","slice","mod","braceFold","__proto__","Symbol","toStringTag"],"mappings":"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","file":"static/js/5.a67e9f54.chunk.js","sourcesContent":["import _defineProperty from \"/Users/creimers/projects/graphene-graphiql-explorer/graphene_graphiql_explorer/src/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _mergeNamespaces2;\n\nvar __defProp = Object.defineProperty;\n\nvar __name = function __name(target, value) {\n  return __defProp(target, \"name\", {\n    value: value,\n    configurable: true\n  });\n};\n\nimport { a as codemirror } from \"./codemirror.es.js\";\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function (e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n\n__name(_mergeNamespaces, \"_mergeNamespaces\");\n\nvar braceFold$2 = {\n  exports: {}\n};\n\n(function (module, exports) {\n  (function (mod) {\n    mod(codemirror.exports);\n  })(function (CodeMirror) {\n    function bracketFolding(pairs) {\n      return function (cm, start) {\n        var line = start.line,\n            lineText = cm.getLine(line);\n\n        function findOpening(pair) {\n          var tokenType;\n\n          for (var at = start.ch, pass = 0;;) {\n            var found2 = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n\n            if (found2 == -1) {\n              if (pass == 1) break;\n              pass = 1;\n              at = lineText.length;\n              continue;\n            }\n\n            if (pass == 1 && found2 < start.ch) break;\n            tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found2 + 1));\n            if (!/^(comment|string)/.test(tokenType)) return {\n              ch: found2 + 1,\n              tokenType: tokenType,\n              pair: pair\n            };\n            at = found2 - 1;\n          }\n        }\n\n        __name(findOpening, \"findOpening\");\n\n        function findRange(found2) {\n          var count = 1,\n              lastLine = cm.lastLine(),\n              end,\n              startCh = found2.ch,\n              endCh;\n\n          outer: for (var i2 = line; i2 <= lastLine; ++i2) {\n            var text = cm.getLine(i2),\n                pos = i2 == line ? startCh : 0;\n\n            for (;;) {\n              var nextOpen = text.indexOf(found2.pair[0], pos),\n                  nextClose = text.indexOf(found2.pair[1], pos);\n              if (nextOpen < 0) nextOpen = text.length;\n              if (nextClose < 0) nextClose = text.length;\n              pos = Math.min(nextOpen, nextClose);\n              if (pos == text.length) break;\n\n              if (cm.getTokenTypeAt(CodeMirror.Pos(i2, pos + 1)) == found2.tokenType) {\n                if (pos == nextOpen) ++count;else if (! --count) {\n                  end = i2;\n                  endCh = pos;\n                  break outer;\n                }\n              }\n\n              ++pos;\n            }\n          }\n\n          if (end == null || line == end) return null;\n          return {\n            from: CodeMirror.Pos(line, startCh),\n            to: CodeMirror.Pos(end, endCh)\n          };\n        }\n\n        __name(findRange, \"findRange\");\n\n        var found = [];\n\n        for (var i = 0; i < pairs.length; i++) {\n          var open = findOpening(pairs[i]);\n          if (open) found.push(open);\n        }\n\n        found.sort(function (a, b) {\n          return a.ch - b.ch;\n        });\n\n        for (var i = 0; i < found.length; i++) {\n          var range = findRange(found[i]);\n          if (range) return range;\n        }\n\n        return null;\n      };\n    }\n\n    __name(bracketFolding, \"bracketFolding\");\n\n    CodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n    CodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n    CodeMirror.registerHelper(\"fold\", \"import\", function (cm, start) {\n      function hasImport(line) {\n        if (line < cm.firstLine() || line > cm.lastLine()) return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string)) start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type != \"keyword\" || start2.string != \"import\") return null;\n\n        for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n          var text = cm.getLine(i),\n              semi = text.indexOf(\";\");\n          if (semi != -1) return {\n            startCh: start2.end,\n            end: CodeMirror.Pos(i, semi)\n          };\n        }\n      }\n\n      __name(hasImport, \"hasImport\");\n\n      var startLine = start.line,\n          has = hasImport(startLine),\n          prev;\n      if (!has || hasImport(startLine - 1) || (prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1) return null;\n\n      for (var end = has.end;;) {\n        var next = hasImport(end.line + 1);\n        if (next == null) break;\n        end = next.end;\n      }\n\n      return {\n        from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)),\n        to: end\n      };\n    });\n    CodeMirror.registerHelper(\"fold\", \"include\", function (cm, start) {\n      function hasInclude(line) {\n        if (line < cm.firstLine() || line > cm.lastLine()) return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string)) start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type == \"meta\" && start2.string.slice(0, 8) == \"#include\") return start2.start + 8;\n      }\n\n      __name(hasInclude, \"hasInclude\");\n\n      var startLine = start.line,\n          has = hasInclude(startLine);\n      if (has == null || hasInclude(startLine - 1) != null) return null;\n\n      for (var end = startLine;;) {\n        var next = hasInclude(end + 1);\n        if (next == null) break;\n        ++end;\n      }\n\n      return {\n        from: CodeMirror.Pos(startLine, has + 1),\n        to: cm.clipPos(CodeMirror.Pos(end))\n      };\n    });\n  });\n})();\n\nvar braceFold = braceFold$2.exports;\nvar braceFold$1 =\n/* @__PURE__ */\nObject.freeze(\n/* @__PURE__ */\n_mergeNamespaces((_mergeNamespaces2 = {\n  __proto__: null\n}, _defineProperty(_mergeNamespaces2, Symbol.toStringTag, \"Module\"), _defineProperty(_mergeNamespaces2, \"default\", braceFold), _mergeNamespaces2), [braceFold$2.exports]));\nexport { braceFold$1 as b };"],"sourceRoot":""}