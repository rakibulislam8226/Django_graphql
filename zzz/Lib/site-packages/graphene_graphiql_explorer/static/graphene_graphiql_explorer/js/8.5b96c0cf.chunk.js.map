{"version":3,"sources":["../node_modules/@graphiql/react/dist/searchcursor.es.js"],"names":["__webpack_require__","r","__webpack_exports__","d","searchcursor$2","searchcursor$1","_mergeNamespaces2","_Users_creimers_projects_graphene_graphiql_explorer_graphene_graphiql_explorer_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_1__","__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","getOwnPropertyDescriptor","get","enumerable","freeze","exports","CodeMirror","doFold","noFold","Pos","regexpFlags","regexp","flags","ignoreCase","global","multiline","ensureFlags","current","i","length","indexOf","charAt","RegExp","source","maybeMultiline","test","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","searchRegexpForwardMultiline","chunk","curLine","before","slice","split","inside","startLine","startCh","lastMatchIn","endMargin","newMatch","end","searchRegexpBackward","first","firstLine","searchRegexpBackwardMultiline","chunkSize","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","searchStringForward","query","caseFold","fold","lines","search","found","cutFrom","endString","searchStringBackward","lastIndexOf","top","topString","SearchCursor","options","this","atOccurrence","afterEmptyMatch","clipPos","matches","reverse","pos2","String","prototype","normalize","str","toLowerCase","findNext","find","findPrevious","head","cmpPos","result","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","setSelections","mod","searchcursor","__proto__","Symbol","toStringTag"],"mappings":"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","file":"static/js/8.5b96c0cf.chunk.js","sourcesContent":["import _defineProperty from \"/Users/creimers/projects/graphene-graphiql-explorer/graphene_graphiql_explorer/src/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _mergeNamespaces2;\n\nvar __defProp = Object.defineProperty;\n\nvar __name = function __name(target, value) {\n  return __defProp(target, \"name\", {\n    value: value,\n    configurable: true\n  });\n};\n\nimport { a as codemirror } from \"./codemirror.es.js\";\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function (e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n\n__name(_mergeNamespaces, \"_mergeNamespaces\");\n\nvar searchcursor$2 = {\n  exports: {}\n};\n\n(function (module, exports) {\n  (function (mod) {\n    mod(codemirror.exports);\n  })(function (CodeMirror) {\n    var Pos = CodeMirror.Pos;\n\n    function regexpFlags(regexp) {\n      var flags = regexp.flags;\n      return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\") + (regexp.global ? \"g\" : \"\") + (regexp.multiline ? \"m\" : \"\");\n    }\n\n    __name(regexpFlags, \"regexpFlags\");\n\n    function ensureFlags(regexp, flags) {\n      var current = regexpFlags(regexp),\n          target = current;\n\n      for (var i = 0; i < flags.length; i++) {\n        if (target.indexOf(flags.charAt(i)) == -1) target += flags.charAt(i);\n      }\n\n      return current == target ? regexp : new RegExp(regexp.source, target);\n    }\n\n    __name(ensureFlags, \"ensureFlags\");\n\n    function maybeMultiline(regexp) {\n      return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n    }\n\n    __name(maybeMultiline, \"maybeMultiline\");\n\n    function searchRegexpForward(doc, regexp, start) {\n      regexp = ensureFlags(regexp, \"g\");\n\n      for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n        regexp.lastIndex = ch;\n        var string = doc.getLine(line),\n            match = regexp.exec(string);\n        if (match) return {\n          from: Pos(line, match.index),\n          to: Pos(line, match.index + match[0].length),\n          match: match\n        };\n      }\n    }\n\n    __name(searchRegexpForward, \"searchRegexpForward\");\n\n    function searchRegexpForwardMultiline(doc, regexp, start) {\n      if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start);\n      regexp = ensureFlags(regexp, \"gm\");\n      var string,\n          chunk = 1;\n\n      for (var line = start.line, last = doc.lastLine(); line <= last;) {\n        for (var i = 0; i < chunk; i++) {\n          if (line > last) break;\n          var curLine = doc.getLine(line++);\n          string = string == null ? curLine : string + \"\\n\" + curLine;\n        }\n\n        chunk = chunk * 2;\n        regexp.lastIndex = start.ch;\n        var match = regexp.exec(string);\n\n        if (match) {\n          var before = string.slice(0, match.index).split(\"\\n\"),\n              inside = match[0].split(\"\\n\");\n          var startLine = start.line + before.length - 1,\n              startCh = before[before.length - 1].length;\n          return {\n            from: Pos(startLine, startCh),\n            to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n            match: match\n          };\n        }\n      }\n    }\n\n    __name(searchRegexpForwardMultiline, \"searchRegexpForwardMultiline\");\n\n    function lastMatchIn(string, regexp, endMargin) {\n      var match,\n          from = 0;\n\n      while (from <= string.length) {\n        regexp.lastIndex = from;\n        var newMatch = regexp.exec(string);\n        if (!newMatch) break;\n        var end = newMatch.index + newMatch[0].length;\n        if (end > string.length - endMargin) break;\n        if (!match || end > match.index + match[0].length) match = newMatch;\n        from = newMatch.index + 1;\n      }\n\n      return match;\n    }\n\n    __name(lastMatchIn, \"lastMatchIn\");\n\n    function searchRegexpBackward(doc, regexp, start) {\n      regexp = ensureFlags(regexp, \"g\");\n\n      for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n        var string = doc.getLine(line);\n        var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch);\n        if (match) return {\n          from: Pos(line, match.index),\n          to: Pos(line, match.index + match[0].length),\n          match: match\n        };\n      }\n    }\n\n    __name(searchRegexpBackward, \"searchRegexpBackward\");\n\n    function searchRegexpBackwardMultiline(doc, regexp, start) {\n      if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start);\n      regexp = ensureFlags(regexp, \"gm\");\n      var string,\n          chunkSize = 1,\n          endMargin = doc.getLine(start.line).length - start.ch;\n\n      for (var line = start.line, first = doc.firstLine(); line >= first;) {\n        for (var i = 0; i < chunkSize && line >= first; i++) {\n          var curLine = doc.getLine(line--);\n          string = string == null ? curLine : curLine + \"\\n\" + string;\n        }\n\n        chunkSize *= 2;\n        var match = lastMatchIn(string, regexp, endMargin);\n\n        if (match) {\n          var before = string.slice(0, match.index).split(\"\\n\"),\n              inside = match[0].split(\"\\n\");\n          var startLine = line + before.length,\n              startCh = before[before.length - 1].length;\n          return {\n            from: Pos(startLine, startCh),\n            to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n            match: match\n          };\n        }\n      }\n    }\n\n    __name(searchRegexpBackwardMultiline, \"searchRegexpBackwardMultiline\");\n\n    var doFold, noFold;\n\n    if (String.prototype.normalize) {\n      doFold =\n      /* @__PURE__ */\n      __name(function (str) {\n        return str.normalize(\"NFD\").toLowerCase();\n      }, \"doFold\");\n      noFold =\n      /* @__PURE__ */\n      __name(function (str) {\n        return str.normalize(\"NFD\");\n      }, \"noFold\");\n    } else {\n      doFold =\n      /* @__PURE__ */\n      __name(function (str) {\n        return str.toLowerCase();\n      }, \"doFold\");\n      noFold =\n      /* @__PURE__ */\n      __name(function (str) {\n        return str;\n      }, \"noFold\");\n    }\n\n    function adjustPos(orig, folded, pos, foldFunc) {\n      if (orig.length == folded.length) return pos;\n\n      for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n        if (min == max) return min;\n        var mid = min + max >> 1;\n        var len = foldFunc(orig.slice(0, mid)).length;\n        if (len == pos) return mid;else if (len > pos) max = mid;else min = mid + 1;\n      }\n    }\n\n    __name(adjustPos, \"adjustPos\");\n\n    function searchStringForward(doc, query, start, caseFold) {\n      if (!query.length) return null;\n      var fold = caseFold ? doFold : noFold;\n      var lines = fold(query).split(/\\r|\\n\\r?/);\n\n      search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n        var orig = doc.getLine(line).slice(ch),\n            string = fold(orig);\n\n        if (lines.length == 1) {\n          var found = string.indexOf(lines[0]);\n          if (found == -1) continue search;\n          var start = adjustPos(orig, string, found, fold) + ch;\n          return {\n            from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n            to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n          };\n        } else {\n          var cutFrom = string.length - lines[0].length;\n          if (string.slice(cutFrom) != lines[0]) continue search;\n\n          for (var i = 1; i < lines.length - 1; i++) {\n            if (fold(doc.getLine(line + i)) != lines[i]) continue search;\n          }\n\n          var end = doc.getLine(line + lines.length - 1),\n              endString = fold(end),\n              lastLine = lines[lines.length - 1];\n          if (endString.slice(0, lastLine.length) != lastLine) continue search;\n          return {\n            from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n            to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n          };\n        }\n      }\n    }\n\n    __name(searchStringForward, \"searchStringForward\");\n\n    function searchStringBackward(doc, query, start, caseFold) {\n      if (!query.length) return null;\n      var fold = caseFold ? doFold : noFold;\n      var lines = fold(query).split(/\\r|\\n\\r?/);\n\n      search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n        var orig = doc.getLine(line);\n        if (ch > -1) orig = orig.slice(0, ch);\n        var string = fold(orig);\n\n        if (lines.length == 1) {\n          var found = string.lastIndexOf(lines[0]);\n          if (found == -1) continue search;\n          return {\n            from: Pos(line, adjustPos(orig, string, found, fold)),\n            to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n          };\n        } else {\n          var lastLine = lines[lines.length - 1];\n          if (string.slice(0, lastLine.length) != lastLine) continue search;\n\n          for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++) {\n            if (fold(doc.getLine(start + i)) != lines[i]) continue search;\n          }\n\n          var top = doc.getLine(line + 1 - lines.length),\n              topString = fold(top);\n          if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search;\n          return {\n            from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n            to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n          };\n        }\n      }\n    }\n\n    __name(searchStringBackward, \"searchStringBackward\");\n\n    function SearchCursor(doc, query, pos, options) {\n      this.atOccurrence = false;\n      this.afterEmptyMatch = false;\n      this.doc = doc;\n      pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n      this.pos = {\n        from: pos,\n        to: pos\n      };\n      var caseFold;\n\n      if (typeof options == \"object\") {\n        caseFold = options.caseFold;\n      } else {\n        caseFold = options;\n        options = null;\n      }\n\n      if (typeof query == \"string\") {\n        if (caseFold == null) caseFold = false;\n\n        this.matches = function (reverse, pos2) {\n          return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos2, caseFold);\n        };\n      } else {\n        query = ensureFlags(query, \"gm\");\n        if (!options || options.multiline !== false) this.matches = function (reverse, pos2) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos2);\n        };else this.matches = function (reverse, pos2) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos2);\n        };\n      }\n    }\n\n    __name(SearchCursor, \"SearchCursor\");\n\n    SearchCursor.prototype = {\n      findNext: function findNext() {\n        return this.find(false);\n      },\n      findPrevious: function findPrevious() {\n        return this.find(true);\n      },\n      find: function find(reverse) {\n        var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n\n        if (this.afterEmptyMatch && this.atOccurrence) {\n          head = Pos(head.line, head.ch);\n\n          if (reverse) {\n            head.ch--;\n\n            if (head.ch < 0) {\n              head.line--;\n              head.ch = (this.doc.getLine(head.line) || \"\").length;\n            }\n          } else {\n            head.ch++;\n\n            if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n              head.ch = 0;\n              head.line++;\n            }\n          }\n\n          if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n            return this.atOccurrence = false;\n          }\n        }\n\n        var result = this.matches(reverse, head);\n        this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0;\n\n        if (result) {\n          this.pos = result;\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        } else {\n          var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n          this.pos = {\n            from: end,\n            to: end\n          };\n          return this.atOccurrence = false;\n        }\n      },\n      from: function from() {\n        if (this.atOccurrence) return this.pos.from;\n      },\n      to: function to() {\n        if (this.atOccurrence) return this.pos.to;\n      },\n      replace: function replace(newText, origin) {\n        if (!this.atOccurrence) return;\n        var lines = CodeMirror.splitLines(newText);\n        this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n        this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n      }\n    };\n    CodeMirror.defineExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n      return new SearchCursor(this.doc, query, pos, caseFold);\n    });\n    CodeMirror.defineDocExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n      return new SearchCursor(this, query, pos, caseFold);\n    });\n    CodeMirror.defineExtension(\"selectMatches\", function (query, caseFold) {\n      var ranges = [];\n      var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n\n      while (cur.findNext()) {\n        if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n        ranges.push({\n          anchor: cur.from(),\n          head: cur.to()\n        });\n      }\n\n      if (ranges.length) this.setSelections(ranges, 0);\n    });\n  });\n})();\n\nvar searchcursor = searchcursor$2.exports;\nvar searchcursor$1 =\n/* @__PURE__ */\nObject.freeze(\n/* @__PURE__ */\n_mergeNamespaces((_mergeNamespaces2 = {\n  __proto__: null\n}, _defineProperty(_mergeNamespaces2, Symbol.toStringTag, \"Module\"), _defineProperty(_mergeNamespaces2, \"default\", searchcursor), _mergeNamespaces2), [searchcursor$2.exports]));\nexport { searchcursor$2 as a, searchcursor$1 as s };"],"sourceRoot":""}